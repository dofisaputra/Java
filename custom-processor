/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.twitter.processors.twint;

import org.apache.nifi.components.PropertyDescriptor;
import org.apache.nifi.flowfile.FlowFile;
import org.apache.nifi.flowfile.attributes.CoreAttributes;
import org.apache.nifi.annotation.behavior.ReadsAttribute;
import org.apache.nifi.annotation.behavior.ReadsAttributes;
import org.apache.nifi.annotation.behavior.WritesAttribute;
import org.apache.nifi.annotation.behavior.WritesAttributes;
import org.apache.nifi.annotation.lifecycle.OnScheduled;
import org.apache.nifi.annotation.documentation.CapabilityDescription;
import org.apache.nifi.annotation.documentation.SeeAlso;
import org.apache.nifi.annotation.documentation.Tags;
import org.apache.nifi.processor.exception.ProcessException;
import org.apache.nifi.processor.io.OutputStreamCallback;
import org.apache.nifi.processor.AbstractProcessor;
import org.apache.nifi.processor.ProcessContext;
import org.apache.nifi.processor.ProcessSession;
import org.apache.nifi.processor.ProcessorInitializationContext;
import org.apache.nifi.processor.Relationship;
import org.apache.nifi.processor.util.StandardValidators;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Tags({"example"})
@CapabilityDescription("Provide a description")
@SeeAlso({})
@ReadsAttributes({@ReadsAttribute(attribute="", description="")})
@WritesAttributes({@WritesAttribute(attribute="", description="")})
public class TwintProcessor extends AbstractProcessor {
    // private String content = "hello";
    BufferedReader reader;
    // private Process process;

    public static final PropertyDescriptor TWITTER_USERID = new PropertyDescriptor
            .Builder().name("user_id")
            .displayName("user_id")
            .description("Twitter user's ID")
            .required(true)
            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
            .build();
    
    public static final PropertyDescriptor SINCE_DATE = new PropertyDescriptor
            .Builder().name("since")
            .displayName("since")
            .description("Filter Tweets sent since date (Example: 2017-12-27)")
            .required(false)
            .defaultValue("")
            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
            .build();

    public static final Relationship REL_SUCCESS = new Relationship.Builder()
            .name("success")
            .description("Success Scrape Twitter Account")
            .build();
    
    public static final Relationship REL_FAILURE = new Relationship.Builder()
            .name("failure")
            .description("Failure Scrape Twitter Account")
            .build();

    private List<PropertyDescriptor> descriptors;

    private Set<Relationship> relationships;

    @Override
    protected void init(final ProcessorInitializationContext context) {
        final List<PropertyDescriptor> descriptors = new ArrayList<>();
        descriptors.add(TWITTER_USERID);
        descriptors.add(SINCE_DATE);
        this.descriptors = Collections.unmodifiableList(descriptors);

        final Set<Relationship> relationships = new HashSet<>();
        relationships.add(REL_SUCCESS);
        relationships.add(REL_FAILURE);
        this.relationships = Collections.unmodifiableSet(relationships);
    }

    @Override
    public Set<Relationship> getRelationships() {
        return this.relationships;
    }

    @Override
    public final List<PropertyDescriptor> getSupportedPropertyDescriptors() {
        return descriptors;
    }

    @OnScheduled
    public void onScheduled(final ProcessContext context) throws IOException {
        String twtUserId = context.getProperty(TWITTER_USERID).getValue();
        String sinceDate = context.getProperty(SINCE_DATE).getValue();
        Process process = Runtime.getRuntime().exec("python3 /home/ebdesk/Music/python/twint/twitter_post.py "+twtUserId+" "+sinceDate);
        BufferedReader in = new BufferedReader(new InputStreamReader(process.getInputStream()));
        this.reader = in;
    }

    @Override
    public void onTrigger(final ProcessContext context, final ProcessSession session) throws ProcessException {
        FlowFile flowFile = session.create();
        if ( flowFile == null ) {
            return;
        }

        try {
            FlowFile output = null;
            while (reader.readLine() != null) {
                output = session.write(flowFile, new OutputStreamCallback(){
                    @Override
                    public void process(OutputStream out) throws IOException {
                        out.write(reader.readLine().getBytes(StandardCharsets.UTF_8));                    
                    }               
                });
                break;
            }
            
            if (output != null) {
                output = session.putAttribute(output, CoreAttributes.MIME_TYPE.key(), "application/json");
                session.transfer(output, REL_SUCCESS);
            } else {
                session.remove(flowFile);
            }         
            
        } catch (IOException e) {
            getLogger().error("failure");
                session.transfer(flowFile, REL_FAILURE);
                session.remove(flowFile);
        }
        
    }
}
